= slide 'Релацонна база от данни' do
  img src="images/erd.png"

= slide 'SQL' do
  p Език за работа с данни.
  p Той позволява:
  ul
    li.action Вмъкване на данни(Insert)
    li.action Извличане на данни(Select)
    li.action Редактиране на данни(Update)
    li.action Изтриване на данни(Delete)
    li.action Създавне на таблици, вюта, бази и други (Create)

= slide 'Преди всичко UTF-8' do
  example:
    [lang:sql]
    SET NAMES utf8;

= slide 'Извличане на данни(Select)' do
  img src="images/erd.png"

  example:
    [lang:sql]
    SELECT * FROM MAJORS
    SELECT NAME, ACADEMIC_DEGREE FROM MAJORS
    SELECT * FROM MAJORS WHERE NAME = 'Software Engineering'
    SELECT * FROM MAJORS WHERE START_YEAR = 2011

= slide 'Вмъкване на данни(Insert)' do
  img src="images/erd.png"

  example:
    [lang:sql]
    INSERT INTO MAJORS (NAME, ACADEMIC_DEGREE) VALUES ('Software Eginnering', 'bachelor')

= slide 'JOIN заявки' do
  img src="images/erd.png"

  example:
    [lang:sql]
    SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
    FROM Orders
    INNER JOIN Customers
    ON Orders.CustomerID=Customers.CustomerID;

  p Типове SQL JOIN:

  ul
    li INNER JOIN: Връща всички редове за които има поне едно съвпадение и в двете таблици.
    li LEFT JOIN:  Връща всички редове от лявата таблица и съвпадащите редове в дясната.
    li RIGHT JOIN:  Връща всички редове от дясната таблица и съвпадатещите редове в лявата.
    li FULL JOIN:  Връща всички редове когато има съвпадение в една от таблиците.

= slide 'MySQL' do
  p [от Уикипедия, свободната енциклопедия] MySQL SQL система за управление на бази данни (СУБД) с повече от шест милиона инсталации.

= slide 'Изпълняване на SQL заявки през phpMyAdmin' do
  img src="images/lecture_3_php-myadmin.png"

= slide 'PDO' do
  p В PHP има разширения(Extensions), които надграждат основната функционалност на езика. PHP Data Objects (PDO) е едно такова разширение.
  p Дефинира лек, консистентен интерфейс за работа с различни СУБД.
  p Предоставя абстрактен слой за работа с данни.
  p СУБД която използвате е без значение, защото интерфейса е еднакъв - MS SQL Server, DB2, MySQL, Oracle, PostgreSQL, SQLite....

= slide 'PDO Свързване към база' do
  example:
    <?php
    $user = 'username';
    $pass = 'password';
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
    // use the connection here
    // and now we're done; close it
    $dbh = null;
    ?>

= slide 'PDO Извличане на данни' do
  example:
    <?php
    $host   = "localhost";
    $db     = "my_db";
    $user   = "root";
    $pass   = ""

    $conn = new PDO("mysql:host=$host;dbname=$db",$user,$pass);
    $sql     = "SELECT * FROM MAJORS";
    $query   = $conn->query($sql) or die("failed!");
    while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
      echo $row['NAME'];
    }

= slide 'PDO Извличане на данни' do
  example:
    <?php
    // ...
    echo '<ul>';
    while($row = $q->fetch(PDO::FETCH_ASSOC)){
      echo '<li>'.$row['NAME'].'</li>';
    }
    echo '</ul>';

= slide 'Prepared statements' do
  p Заявка, записан в базата от данни и която може да се изпълнява многократно с подаване на различни данни.

= slide 'Prepared statements' do
  p Етапи:
  ul
    li.action Заявката се съставя от приложението и се изпраща на базата от данни.
    li.action Базата от данни парсва, компилира, оптимизира заявката и я запазва.
    li.action В следващ момент, приложението подава данни към тази заявка и тя се изпълнява, като това се повтаря многократно.
  p.action  Защо да ги ползваме?
  ul.action
    li Повишава се бързодействието.
    li Повишава се сигурността.

= slide 'Prepared statements' do
  example:
    <?php
      $stmt = $conn->prepare("
          INSERT INTO electives (title, academic_degree)
          VALUES (:title, :academic_degree)");
      $stmt->bindParam(':title', $title);
      $stmt->bindParam(':academic_degree', $academic_degree);

      $title = 'Programming with Go';
      $academic_degree = 'bachelor';
      $stmt->execute();

      $title = 'Mining Data from Text';
      $academic_degree = 'master';
      $stmt->execute();
    ?>

= slide 'Prepared statements' do
  example:
    <?php
      echo '<ul>';
      $stmt = $conn->prepare("SELECT * FROM electives where academic_degree = ?");
      if ($stmt->execute(array('bachelor'))) {
        while ($row = $stmt->fetch()) {
          echo '<li>'.$row["NAME"].'</li>';
        }
      }
      echo '</ul>';
    ?>

= slide 'Транзакции' do
  example:
    <?php
      $conn->beginTransaction();

      $sql = 'INSERT INTO electives (title, academic_degree) VALUES (?, ?)';
      $sth = $conn->prepare($sql);

      foreach ($electives as $elective) {
          $sth->execute(array(
              $elective->title,
              $elective->academic_degree,
          ));
      }
      $dbh->commit();
    ?>

= slide 'Транзакции' do
  example:
   <?php
      $conn->beginTransaction();

      $sth = $conn->exec("DROP TABLE electives");

      $conn->rollBack();
    ?>

= slide 'Задача 1' do
  p Имате база от данни със следната таблица и данни:
  example:
    [lang:sql]
    CREATE TABLE electives
    (
      id INT AUTO_INCREMENT PRIMARY KEY,
      title VARCHAR(128),
      description VARCHAR(1024),
      lecturer VARCHAR(128)
    );

    INSERT INTO electives (title, description, lecturer)
    VALUES ("Programming with Go", "Let's learn Go", "Nikolay Batchiyski");

    INSERT INTO electives (title, description, lecturer)
    VALUES ("AKDU", "Let's Graduate", "Svetlin Ivanov");

    INSERT INTO electives (title, description, lecturer)
    VALUES ("Web technologies", "Let's learn the web", "Milen Petrov");

= slide 'Задача 1' do
  p Имплементирайте php страница с форма и валидация за добавяне на избираема дисциплина.
  p Добавете колона created_at на таблицата electives.
  p Трябва по подразбиране да сочи момента на добавяне на реда.

= slide 'Задача 2' do
  p Добавете функционалност за редактиране на избираема дисциплина.
  p Например: HTTP PUT на /electives.php/1 със съответните параметри трябва да промени избираемата с id 1.

= slide 'JavaScript' do
  list:
    JavaScript е скриптов език за уеб.
    Изпълнява се предимно в браузъра.
    Oбектно-ориентиран език e. Числата са обект, масивите са обект, всичко е обект.
    Има прототипно базирано наследяване.
    Има динамично типизиране.
    Има функционални елементи.
= slide 'Лошият JavaScript' do
  list:
    Повечето хора не харесват JavaScript.
    Създаден е за 10 дни от Brendan Eich като проект на Netscape.
    Променя се бавно и трудно.
= slide 'Добрият JavaScript' do
  img src="images/klingon.gif" width="20%" height="20%"
= slide 'Добрият JavaScript' do
  img src="images/klingon.jpg" width="40%" height="40%"
= slide 'Добрият JavaScript' do
  img src="images/Garnoth264578db983e7b1.jpg" width="40%" height="40%"
= slide 'Добрият JavaScript' do
  p JavaScript е най-популарния език в GitHub.
  img src="images/github-languages.png"
= slide 'Добрият JavaScript' do
  list:
    Супер популярен е.
    Има голямо общество, което прави интересни и иновативни проекти.
    Работи навсякъде - в браузъра, на сървъра, на мобилни устройства и в бази от данни.
    Супер бърз е.
= slide 'JavaScript в HTML' do
  html:
    <script type="text/javascript" src="file.js" />
= slide 'JavaScript в HTML' do
  html: 
    <script type="text/javascript">...</script>
= slide 'Променливи' do
  js_example:
    var intValue = 1;
    var floatValue = 3.0;
    var stringValue = "This is a string\n";
    var sqString = 'This is also a string';
= slide 'Масиви(вектори)' do
  p Последователност от елементи. Индексирана и поредна колекция.
  js_example:
    var emptyList = [];
    var homogenousList = [1, 2, 3];
    var heterogenousList = ["one", 2, 3.0];
= slide 'Достъп по елементи на масив' do
  js_example:
    var heterogenousList = ["one", 2, 3.0];
    alert(heterogenousList[0]); //"one"
    alert(heterogenousList[1]); //2
    alert(heterogenousList[2]); //3.0
= slide 'Речници(обекти)' do
  p Или още map, хешове, речници, асоциативни масиви и други. Съдържа двойки ключ стойност.
  js_example:
    var emptyMap = {};
    var homogenousMap = {"one": 1, "two": 2, "three": 3};
    var heterogenousMap = {"one": 1,"two": "two","three": 3.0};
= slide 'Достъп до елемент на речник' do
  js_example:
    var homogenousMap = {"one": 1, "two": 2, "three": 3};
    alert(homogenousMap.one);    //1
    alert(homogenousMap["one"]); //1
  p Първия(с точката) е за предпочитане.
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    }
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    } else {

    }
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    } else if (cond) {

    } else {
    
    }
= slide 'Switch' do
  js_example:
    switch (n) {
      case 1:
        //execute code block 1
        break;
      case 2:
        //execute code block 2
        break;
      default:
        //code to be executed if n is different from case 1 and 2
    }
= slide 'Цикъл for' do
  js_example:
    var cars = ['Audi', 'BMW', 'Mercedes-Benz', 'Opel', 'Porsche', 'Volkswagen'];
    for (var i=0; i < cars.length; i++) { 
      document.write(cars[i] + "<br>");
    }
= slide 'Цикъл while' do
  js_example:
    while (condition) {
      //code block to be executed
    }
= slide 'Цикъл while' do
  js_example:
    do {
      //code block to be executed
    } while (condition);
= slide 'Обхождане на речник' do
  js_example:
    var person = {first_name: "John", last_name: "Doe", age: 25}; 
    var txt = '';
    for (x in person) {
      txt = txt + person[x] + ' ';
    }

    document.write(txt) //John Doe 25
= slide 'Безопасно обхождане на речник' do
  p При обхождане на речник трябва да финлтрираме прототипните свойства.
  js_example:
    Object.prototype.forEach = function () {...};

    for (x in person) {
      if (man.hasOwnProperty(i)) { // filter
        txt = txt + person[x] + ' ';
      }
    }
= slide 'Функции' do
  js_example:
    var callable = function (message) { 
      alert("Callable called with message = " + message);
    };

    function callable(message) {
      alert("Callable called with message = " + message);
    }

    callable("Hello World");
= slide 'Функции' do
  js_example:
    // calculate distance between points (x1, y1) and (x2, y2)
    function distance(x1, y1, x2, y2) {
      var dx = x2 - x1;
      var dy = y2 - y1;
      return Math.sqrt(dx*dx + dy*dy);
    }
  
    distance(0, 0, 1, 1);
= slide 'Функции' do
  js_example:
    function squareProduct(x, y) {
      function square(x) {
        return x * x;
      }

      return square(x) * square(y);
    }

    squareProduct(2, 3); //36
= slide 'Функция като стойност' do
  js_example:
    function square(x) { return x*x; }

    var s = square; // s refers to the same function that square does
    square(4);      // => 16
    s(4);           // => 16
= slide 'Видимост' do
  list:
    JavaScript използва <b>lexical scoping</b>.
    Функциите се изпълняват в областта на видимост, в която са били дефинирани, а не в област в която се извикват.
    Съвкупноста от функционалния обект и областа на видимост в която се изпълнява той, се нарича <b>closure</b>.
    Повечето JavaScript функции са closure-и.
= slide 'Видимост' do
  js_example:
    var scope = "global scope"; // A global variable
    function checkscope() {
      var scope = "local scope"; // A local variable
      function f() { return scope; } // Return the value in scope here
      return f();
    }
    checkscope(); // => "local scope"
= slide 'Hoisting на променливите' do
  p Всички променливи декларирани в тялото на функцията са видим навсякъде във функцията.
  p Това означава, че променливите са видими дори преди да бъдат инициализирани.
  js_example:
    var scope = "global";

    function f() {
      console.log(scope); // "undefined", not "global"
      var scope = "local";
      console.log(scope); // "local"
    }
= slide 'Задача 1' do
  p Напишете цикъл, който да визуализира следното:
  pre
    ' abc abc abc abc abc abc abc abc abc

      xyz xyz xyz xyz xyz xyz xyz xyz xyz

      1 2 3 4 5 6 7 8 9

      1. Item A
      2. Item B
      3. Item C
      4. Item D
      5. Item E
      6. Item F
= slide 'Задача 2' do
  p Отпечатайте квадратите на числата от 1 до 12.
= slide 'Задача 3' do
  p Ползвайте вложени цикли и съставете следната талица за умножение:
    <table style="border-collapse: collapse; border: 1px solid black;background-color: #ffff00"><tbody><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">1</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">2</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">3</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">5</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">7</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">2</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">8</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">10</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">14</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">3</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">9</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">15</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">18</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">21</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">8</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">16</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">20</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">24</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">28</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">5</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">10</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">15</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">20</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">25</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">30</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">35</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">18</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">24</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">30</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">36</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">42</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">7</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">14</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">21</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">28</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">35</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">42</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">49</td>
      </tr></tbody>
    </table>
= slide 'Задача 4' do
  p Направете масив със следните стойности:
  p Tokyo, Mexico City, New York City, Mumbai, Seoul, Shanghai, Lagos, Buenos Aires, Cairo, London
  p Отпечатайте ги, разделени със запетая.
= slide 'Задача 5' do
  p Напишете функция, която смята факториел, чрез рекурсия.
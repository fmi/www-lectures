= slide 'ООП в PHP' do
  list:
    PHP има пълна поддръжка на ООП
    Класове, обекти, интерфейси, абстрактни класове, traits
    Наследяване
    Енкапсулация
    Полиморфизъм
    Dynamic dispatch в последните версии
= slide 'ООП в PHP' do
  example:
    <?php
      class SimpleClass {
          // property declaration
          public $var = 'a default value';
          // method declaration
          public function displayVar() {
              echo $this->var;
          }
      }
    ?>
= slide 'ООП в PHP' do
  example:
    <?php
      $instance = new SimpleClass();
      var_dump($instance->var);
      $instance->displayVar();
    ?>
= slide 'ООП в PHP' do
  example:
    <?php
      class Person {
          private $name;
          public function setName($name) {
              $this->name = $name;
          }
          public function getName() {
              return $this->name;
          }
      }

      $joe = new Person();
      $joe->setName('Joe');
    ?>
= slide 'ООП в PHP' do
  p Дефинирането на клас започва с думата <b>class</b>. След нея се поставя името на класа, следвано от двойка къдрави скоби, които указват тялото на класа. В него може да дефинираме методи и свойства, принадлежащи на класа.
  example:
    <?php
      class Person {
          //properties

          //methods
      }
    ?>
= slide 'Свойства' do
  list:
    Това са "член променливите" или "атрибутите" или "полетата" на класа.
    Дефиницията им започва с модификатор public, protected, или private.
    След това се пише името на променливата.
= slide 'Свойства' do
  example:
    <?php
      class Person
      {
          public $prefix;
          public $givenName;
          public $familyName;
          public $suffix;
      }

      $person = new Person();
      $person->prefix = "Mr.";
      $person->givenName = "John";
    ?>
= slide 'Енкапсулация' do
  list:
    public - може да се достъпва/модифицира навсякъде
    private - може да се достъпва/модифицира само от самия клас
    protected - може да се достъпва/модифицира от класа или от наследниците му
= slide 'Енкапсулация' do
  example:
    <?php
      class MyClass {
          public $public = 'Public';
          protected $protected = 'Protected';
          private $private = 'Private';
          function printHello() {
              echo $this->public;
              echo $this->protected;
              echo $this->private;
          }
      }
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      $obj = new MyClass();
      echo $obj->public; // Works
      echo $obj->protected; // Fatal Error
      echo $obj->private; // Fatal Error
      $obj->printHello(); // Shows Public, Protected and Private
    ?>
= slide 'Наследяване' do
  p Наследяването на клас се задава с ключовата дума <b>extends</b>.
  p Няма множествено наследяване.
= slide 'Наследяване' do
  example:
    <?php
      class ExtendClass extends SimpleClass
      {
          // Redefine the parent method
          function displayVar() {
              echo "Extending class\n";
              parent::displayVar();
          }
      }

      $extended = new ExtendClass();
      $extended->displayVar();
    ?>
= slide 'Наследяване' do
  example:
    <?php
      class Foo {
          public function printItem($string) {
              echo 'Foo: ' . $string . PHP_EOL;
          }
          public function printPHP() {
              echo 'PHP is great.' . PHP_EOL;
          }
      }

      class Bar extends Foo {
          public function printItem($string) {
              echo 'Bar: ' . $string . PHP_EOL;
          }
      }
    ?>
= slide 'Наследяване' do
  example:
    <?php
      $foo = new Foo();
      $bar = new Bar();
      $foo->printItem('baz'); // Output: 'Foo: baz'
      $foo->printPHP();       // Output: 'PHP is great' 
      $bar->printItem('baz'); // Output: 'Bar: baz'
      $bar->printPHP();       // Output: 'PHP is great'
    ?>
= slide 'Конструктори' do
  example:
    <?php
      class BaseClass {
         function __construct() {
             print "In BaseClass constructor\n";
         }
      }
      class SubClass extends BaseClass {
         function __construct() {
             parent::__construct();
             print "In SubClass constructor\n";
         }
      }
      $obj = new BaseClass();
      $obj = new SubClass();
    ?>
= slide 'Конструктори' do
  example:
    <?php
      class Person {
          private $first_name;
          private $last_name;
          function __construct($first_name, $last_name) {
             $this->first_name = $first_name;
             $this->last_name = $last_name;
          }
          public function getFullName() {
             return $this->first_name.' '.$this->last_name;    
          }
      }
      $person = new Person('Ivan', 'Ivanov');
      echo $person->getFullName();
    ?>
= slide 'Деструктури' do
  example:
    <?php
      class MyDestructableClass {
         function __construct() {
             print "In constructor\n";
             $this->name = "MyDestructableClass";
         }

         function __destruct() {
             print "Destroying " . $this->name . "\n";
         }
      }

      $obj = new MyDestructableClass();
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      class MyClass {
          public $public = 'Public';
          protected $protected = 'Protected';
          private $private = 'Private';
      }
      class MyClass2 extends MyClass {
          protected $protected = 'Protected2';
          function printHello() {
              echo $this->public;
              echo $this->protected;
              echo $this->private;
          }
      }
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      $obj2 = new MyClass2();
      echo $obj2->public; // Works
      echo $obj2->private; // Undefined
      echo $obj2->protected; // Fatal Error
      $obj2->printHello(); // Shows Public, Protected2, Undefined
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      class MyClass {
          // Declare a public constructor
          public function __construct() { }
          // Declare a public method
          public function MyPublic() { }
          // Declare a protected method
          protected function MyProtected() { }
          // Declare a private method
          private function MyPrivate() { }
      }
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      class MyClass2 extends MyClass {
          // This is public
          function Foo2() {
              $this->MyPublic();
              $this->MyProtected();
              $this->MyPrivate(); // Fatal Error
          }
      }
    ?>
= slide 'Енкапсулация' do
  example:
    <?php
      $myclass2 = new MyClass2();
      $myclass2->MyPublic(); // Works
      $myclass2->Foo2(); // Public and Protected work, not Private
    ?>
= slide 'Абстрактни класове' do
  example:
    <?php
      abstract class AbstractClass {
          // Force Extending class to define this method
          abstract protected function getValue();
          abstract protected function prefixValue($prefix);
          // Common method
          public function printOut() {
              print $this->getValue() . "\n";
          }
      }
    ?>
= slide 'Абстрактни класове' do
  example:
    <?php
      class ConcreteClass extends AbstractClass {
          protected function getValue() {
              return "ConcreteClass";
          }
          public function prefixValue($prefix) {
              return "{$prefix}ConcreteClass";
          }
      }
    ?>
= slide 'Абстрактни класове' do
  example:
    <?php
      $class1 = new ConcreteClass();
      $class1->printOut();
      echo $class1->prefixValue('FOO_') ."\n";
    ?>
= slide 'Final' do
  example:
    <?php
      class BaseClass {         
         final public function moreTesting() {
             echo "BaseClass::moreTesting() called\n";
         }
      }
      class ChildClass extends BaseClass {
         public function moreTesting() {
             echo "ChildClass::moreTesting() called\n";
         }
      }
      // Fatal error: Cannot override final method BaseClass::moreTesting()
    ?>
= slide 'Задача' do
  p Имплементирайте следната йерархия от класове. Всички свойства на класовете трябва да бъдат правилно енкапсулирани и да притежават сетъри и гетъри. Също така, трябва да могат да бъдат инициализирани от конструктура на класа.
  img src="images/oop_task_1.png"
  ul
    li draw() трябва да връща низа "Drawing $id", където $id е стойноста на свойството id на обекта.
    li getArea() трябва да връща лицето на фигурата като цяло число.
    li translate() транслира цялата фигура, rotate() ротира цялата фигура на 90 градуса, scale() скалира фигурата спрямо числото подадено като аргумент.
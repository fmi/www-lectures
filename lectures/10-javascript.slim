= slide 'JavaScript' do
  list:
    JavaScript е скриптов език за уеб.
    Изпълнява се предимно в браузъра.
    Oбектно-ориентиран език e. Числата са обект, масивите са обект, всичко е обект.
    Има прототипно базирано наследяване.
    Има динамично типизиране.
    Има функционални елементи.
= slide 'Добрият JavaScript' do
  img src="images/klingon.gif" width="20%" height="20%"
= slide 'Добрият JavaScript' do
  img src="images/klingon.jpg" width="40%" height="40%"
= slide 'Добрият JavaScript' do
  img src="images/Garnoth264578db983e7b1.jpg" width="40%" height="40%"
= slide 'Добрият JavaScript' do
  p JavaScript е най-популарния език в GitHub.
  img src="images/github-languages.png"
= slide 'JavaScript в HTML' do
  html:
    <script type="text/javascript" src="file.js" />
= slide 'JavaScript в HTML' do
  html: 
    <script type="text/javascript">...</script>
= slide 'Променливи' do
  js_example:
    var intValue = 1;
    var floatValue = 3.0;
    var stringValue = "This is a string\n";
    var sqString = 'This is also a string';
= slide 'Масиви(вектори)' do
  p Последователност от елементи. Индексирана и поредна колекция.
  js_example:
    var emptyList = [];
    var homogenousList = [1, 2, 3];
    var heterogenousList = ["one", 2, 3.0];
= slide 'Достъп по елементи на масив' do
  js_example:
    var heterogenousList = ["one", 2, 3.0];
    alert(heterogenousList[0]); //"one"
    alert(heterogenousList[1]); //2
    alert(heterogenousList[2]); //3.0
= slide 'Речници(обекти)' do
  p Или още map, хешове, речници, асоциативни масиви и други. Съдържа двойки ключ стойност.
  js_example:
    var emptyMap = {};
    var homogenousMap = {"one": 1, "two": 2, "three": 3};
    var heterogenousMap = {"one": 1,"two": "two","three": 3.0};
= slide 'Достъп до елемент на речник' do
  js_example:
    var homogenousMap = {"one": 1, "two": 2, "three": 3};
    alert(homogenousMap.one);    //1
    alert(homogenousMap["one"]); //1
  p Първия(с точката) е за предпочитане.
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    }
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    } else {

    }
= slide 'Условни оператори' do
  js_example:
    if (cond) {

    } else if (cond) {

    } else {
    
    }
= slide 'Switch' do
  js_example:
    switch (n) {
      case 1:
        //execute code block 1
        break;
      case 2:
        //execute code block 2
        break;
      default:
        //code to be executed if n is different from case 1 and 2
    }
= slide 'Цикъл for' do
  js_example:
    var cars = ['Audi', 'BMW', 'Mercedes-Benz', 'Opel', 'Porsche', 'Volkswagen'];
    for (var i=0; i < cars.length; i++) { 
      document.write(cars[i] + "<br>");
    }
= slide 'Цикъл while' do
  js_example:
    while (condition) {
      //code block to be executed
    }
= slide 'Цикъл while' do
  js_example:
    do {
      //code block to be executed
    } while (condition);
= slide 'Обхождане на речник' do
  js_example:
    var person = {first_name: "John", last_name: "Doe", age: 25}; 
    var txt = '';
    for (x in person) {
      txt = txt + person[x] + ' ';
    }

    document.write(txt) //John Doe 25
= slide 'Безопасно обхождане на речник' do
  p При обхождане на речник трябва да финлтрираме прототипните свойства.
  js_example:
    Object.prototype.forEach = function () {...};

    for (x in person) {
      if (man.hasOwnProperty(i)) { // filter
        txt = txt + person[x] + ' ';
      }
    }
= slide 'Функции' do
  js_example:
    var callable = function (message) { 
      alert("Callable called with message = " + message);
    };

    function callable(message) {
      alert("Callable called with message = " + message);
    }

    callable("Hello World");
= slide 'Функции' do
  js_example:
    // calculate distance between points (x1, y1) and (x2, y2)
    function distance(x1, y1, x2, y2) {
      var dx = x2 - x1;
      var dy = y2 - y1;
      return Math.sqrt(dx*dx + dy*dy);
    }
  
    distance(0, 0, 1, 1);
= slide 'Функции' do
  js_example:
    function squareProduct(x, y) {
      function square(x) {
        return x * x;
      }

      return square(x) * square(y);
    }

    squareProduct(2, 3); //36
= slide 'Функция като стойност' do
  js_example:
    function square(x) { return x*x; }

    var s = square; // s refers to the same function that square does
    square(4);      // => 16
    s(4);           // => 16

= slide 'Задача 1' do
  p Напишете цикъл, който да визуализира следното:
  pre
    ' 1. Item A
      2. Item B
      3. Item C
      4. Item D
      5. Item E
      6. Item F
= slide 'Задача 2' do
  p Ползвайте вложени цикли и съставете следната талица за умножение:
    <table style="border-collapse: collapse; border: 1px solid black;background-color: #ffff00"><tbody><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">1</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">2</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">3</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">5</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">7</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">2</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">8</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">10</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">14</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">3</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">9</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">15</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">18</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">21</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">4</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">8</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">16</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">20</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">24</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">28</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">5</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">10</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">15</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">20</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">25</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">30</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">35</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">6</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">12</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">18</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">24</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">30</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">36</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">42</td>
      </tr><tr>
      <td style="width: 2em; text-align:center;border: 1px solid black;">7</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">14</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">21</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">28</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">35</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">42</td>
      <td style="width: 2em; text-align:center;border: 1px solid black;">49</td>
      </tr></tbody>
    </table>
= slide 'Задача 3' do
  p Напишете функция, която смята факториел, чрез рекурсия.
= slide 'DOM' do
  p HTML-a се описва в дървовидна структура. Тя се нарича DOM дърво.    
  img src='images/htmltree.gif'
= slide 'Основни обекти в DOM' do
  p Има няколко основни обекта в JavaScript, който ни помагат да работим с DOM.
  list:
    window (self, top, parent) - window обекта съдържа методи и свойства за прозореца за браузъра
    screen - обект, чрез който може да се вземе информация за екрана - размери, отстояния и т.н.
    history - обекта, който контролира история. Чрез него може да се връщаме в предишни страници.
    location - обекта, който се грижи за текущия адрес. С него може да достъпим информация за адреса или да сменим с нов.
    navigator - обект който съдържа свойста и методи, описващи браузъра
    document - съдържа методи и свойства за работа с елементите в html документа.
= slide 'Селектиране на елементи по id' do
  js_example:
    var element = document.getElementById("example");    
  p Връща първия елемент с подаденото id.
  p В примера селектираме елемента с id - <b>example</b> и го записваме в променливата <b>element</b>.
= slide 'Селектиране на елементи по id' do
  p Пример.
  html:
    <h1 id="myHeader">Latest News</h1>

    <script type="text_javascript">
      var element = document.getElementById("myHeader");
      var content = element.innerHTML;
      alert(content); // Latest News
    </script>
= slide 'Селектиране на елементи по име' do
  js_example:
    var elements = document.getElementsByTagName('p');
  html:
    <h1 id="myHeader">Latest News</h1>
    <h2>First article</h2>
    <p id="date">08.04.13</p>
    <p id="content">Article Content</p>
  p В <b>elements</b> ще бъде записан масив с 2 елемента, които ще са двата параграфа.
= slide 'Селектиране на елементи по клас' do
  js_example:
    var elements = document.getElementsByClassName('food');
  html:
    <p class="food">Pizza</p>
    <p class="drink">Water</p>
    <p class="drink">Wine<p>
    <p class="food">Burger</p>
  p В <b>elements</b>b> ще се запише масив, който се съдържа всички елементи по страница с идентификатор <b>food</b>.
= slide 'Съдържание на елементите като текст' do
  js_example:
    var para,
        text;
    para = document.getElementsByTagName("p")[0];
    text = para.textContent;
    para.textContent = "Hello World!";
= slide 'Съдържание на елементите като html' do
  js_example:
    var firstDiv,
        html;

    firstDiv = document.getElementsByTagName("div")[0];
    html = firstDiv.innerHTML;
    firstDiv.innerHTML = '<p>Test</p>';
= slide 'Създаване на елементи' do
  js_example:
    var newnode = document.createTextNode("text node content");
    var div = document.createElement('div');
= slide 'Вмъкване на елементи' do
  p <b>appendChild</b> вмъква елемента подаден като аргумент, като последно дете на елемента, на който извикваме функцията.
  js_example:
    var p, 
        t;

    p = document.createElement('p');
    t = document.createTextNode('first paragraph');
    p.appendChild(t);
    document.body.appendChild(p);

= slide 'Премахване на елементи' do
  js_example:
    var list=document.getElementById("myList");
    list.removeChild(list.childNodes[0]);
= slide 'Използване на document fragment' do
  p Използваме <b>document fragment</b>, за да избегнем reflow на страницата.
  js_example:
    var p, t, frag;

    frag = document.createDocumentFragment();
    p = document.createElement('p');
    t = document.createTextNode('first paragraph');
    p.appendChild(t);
    frag.appendChild(p);
= slide 'Събития' do
  list:
    В клиентския JavaScript има асиснхронен event-driven програмен модел.
    При него браузъра генерира събитие когато се случи нещо интересно.
= slide 'Събития' do
  p Браузъра генерира събитие когато:
  list:
    Преключи зареждането на страницата
    Потребителя кликне с мишката някъде
    Побребителя натисне копче на клавиатурата
    И много още...
= slide 'Събития' do
  p Ако някои събития за интересни за нас, може да имплементираме JavaScript код, който да реагира като извика функция при определено събитие.
= slide 'Събития с атрибути' do
  html:
    <button onclick="alert('Thank you');">Click Here</button>
= slide 'Събития с атрибути' do
  pre
    ' onafterprint onbeforeprint onbeforeunload onblur
      onerror      onfocus       onhashchange   onload
      onmessage    onoffline     ononline       onpagehide
      onpageshow   onpopstate    onredo         onresize
      onstorage    onundo        onunload
= slide 'JavaScript събития' do
  js_example:
    var b;
    b = document.getElementById("mybutton");
    b.onclick = function () { 
      alert("Thanks for clicking me!"); 
    };
= slide 'JavaScript събития' do
  js_example:
    var b;
    b = document.getElementById("mybutton");
    b.addEventListener("click", function() { 
      alert("Thanks again!"); 
    }, false);
= slide 'JavaScript събития' do
  js_example:
    var b, 
        handleMouseMove;

    handleMouseMove = function() { 
      alert("Thanks again!"); 
    };  

    b = document.getElementById("mybutton");
    b.addEventListener("click", handleMouseMove, false);
= slide 'JavaScript събития' do
  p Премахване на събития:
  js_example:
    document.removeEventListener("mousemove", handleMouseMove, true);
= slide 'Задача 4' do
  p Реализирайте играта Tic-tac-toe(Морски Шах) в браузъра.
